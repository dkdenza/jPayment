<?php

require_once('AdapterAbstract.php');

class Payment_Adapter_Paysbuy extends Payment_Adapter_AdapterAbstract {
	
	/**
	 * Define Gateway name
	 */
	const GATEWAY = "Paysbuy";
	
	/**
	 * @var Gateway URL
	 */
	protected $_gatewayUrl = "https://www.paysbuy.com/paynow.aspx";
	
	/**
	 * @var Check payment transaction (available only paysbuy)
	 */
	protected $_checkUrl = "https://www.paysbuy.com/getinvoicestatus/getinvoicestatus.asmx?WSDL";
	
	/**
	 * @var mapping to transfrom parameter from gateway
	 */
	protected $_defaults_params = array(
		'psb'          => "psp",
		'currencyCode' => "",
		'biz'          => "",
		'inv'          => "",
		'itm'          => "",
		'amt'          => "",
		'postURL'      => ""
	);
	
	/**
	 * @var mapping language frontend interface
	 */
	protected $_language_maps = array(
		'EN' => "e",
		'TH' => "t"
	);
	
	/**
	 * @var mapping currency
	 */
	protected $_currency_maps = array(
		'USD' => "840",
		'THB' => ""
	);
	
	/**
	 * @var mapping payment methods
  	 */
	protected $_method_maps = array(
		'01' => "Paysbuy Account",
		'02' => "Credit Card"
	);

	/**
	 * Construct the payment adapter
	 * 
	 * @access public
	 * @param  array $params (default: array())
	 * @return void
	 */
	public function __construct($params=array())
	{
		parent::__construct($params);
	}
	
	/**
	 * Enable sandbox API
	 * 
	 * @access public
	 * @param  bool 
	 * @return object class (chaining)
	 */
	public function useSandbox($option=true)
	{
		if ($option == true) {
			$this->_gatewayUrl = str_replace('www.', 'demo.', $this->_gatewayUrl);
			$this->_checkUrl = str_replace('www.', 'demo.', $this->_checkUrl);
		}
		return $this;
	}
	
	/**
	 * Build array data and mapping from API
	 * 
	 * @access public
	 * @param  array $extends (default: array())
	 * @return array
	 */
	public function build($extends=array())
	{
		$pass_parameters = array(
			'biz'           => $this->_merchantAccount,
			'inv'           => $this->_invoice,
			'itm'           => $this->_purpose,
			'amt'           => $this->_amount,
			'postURL'       => $this->_backendUrl			
		);
		$params = array_merge($pass_parameters, $extends);
		$build_data = array_merge($this->_defaults_params, $params);
		return $build_data;
	}
	
	/**
	 * Render from data with hidden fields
	 * 
	 * @access public
	 * @param  array $attrs (default: array())
	 * @return string HTML
	 */
	public function render($attrs=array())
	{
		// make webpage language
		$this->_gatewayUrl .= "?lang=".$this->_language_maps[$this->_language];
		$data = $this->build($attrs);
		return $this->_makeFormPayment($data);
	}
	
	/**
	 * Get a post back result from API gateway
	 * POST data from API
	 * Only Paysbuy we re-check transaction 
	 * 
	 * @access public
	 * @return array (POST)
	 */
	public function getFrontendResult()
	{		
		if (count($_POST) == 0 || !array_key_exists('apCode', $_POST)) {
			return false;
		}
		$postdata = $_POST;
		
		$client = new SoapClient($this->_checkUrl, array(
			'encoding'     => 'UTF-8', 
			'soap_version' => SOAP_1_1
		));
		$params = array(
			'merchantEmail' => $this->_merchantAccount, 
			'invoiceNo'     => $this->_invoice,			 
			'strApCode'     => $postdata['apCode']
		);
		try {
			$response = $client->GetInvoice($params);
			$sxe = new SimpleXMLElement($response->GetInvoiceResult->any);
			
			$methodResult = (string)$sxe->MethodResult;
			$method = array_key_exists($methodResult, $this->_method_maps) ? 
				$this->_method_maps[$methodResult] : 
				null;

			$result = array(
				'status' => true,
				'data'   => array(
					'gateway'  => self::GATEWAY,
					'method'   => $method,
					'status'   => (string)$sxe->StatusResult,
					'invoice'  => $this->_invoice,
					'currency' => $this->_currency,
					'amount'   => (string)$sxe->AmountResult,
					'dump'     => serialize($postdata)
				)
			);
		}
		catch (Exception $e) {
			$result = array(
				'status' => false,
				'msg'    => $e->getMessage()
			);
		}		
		return $result;
	}
	
	/**
	 * Get data posted to background process.
	 * Only Paysbuy don't have ipn, so they use frontend instead
	 * 
	 * @access public
	 * @return array
	 */
	public function getBackendResult()
	{
		return $this->getFrontendResult();
	}
	
}

?>